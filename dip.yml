version: '7.1'

environment:
  # Путь до папки с средой. В эту переменную нужно записать полный путь до папки со средой 
  # (где находятся базы данных, traefik и тд), если dip.yml находится не в ней.
  ENVIRONMENT_DIR: ${HOME}/Environment

  # Папка, в которой находится compose файл с базами данных.
  # Используется для перезаписи PROJECT_DIR при запуске команд, выполняемых в контейнерах с базами данных.
  DATABASES: ${ENVIRONMENT_DIR}/databases
  # Папка, в которой находится compose файл разных программ.
  # Используется для перезаписи PROJECT_DIR при запуске команд.
  UTILS: ${ENVIRONMENT_DIR}/utils

  # Путь до папки с проектом. Композ берёт из неё compose и .env файлы, а так же использует её для маунтов
  # относительных путей.
  # По умолчанию используется текущая папка.
  #
  # Эта переменная перезаписывается для некоторых команд, которым нужно использовать compose и .env файлы, 
  # которые находятся в другой папке.
  PROJECT_DIR: ${PWD}
  # Путь до compose файла. По умолчанию используется не существующий файл, чтобы dip не передавал его композу, и композ
  # использовал файл из папки с проектом.
  #
  # Эта переменная перезаписывается для некоторых команд, которым нужно использовать compose файл, который находится вне
  # папки с проектом.
  COMPOSE_YML: doesnt-exist

compose:
  # Команда, которая будет использоваться для запуска compose
  # command: mutagen-compose
  # Путь до папки проекта. Передаётся в флаг --project-directory <dir> при запуске compose.
  # В пути используется переменная, чтобы его можно было менять для разных команд
  project_directory: ${PROJECT_DIR}
  # Путь до compose файла. Если dip найдёт этот файл, то он будет передан композу через флаг --file.
  # Если файл не будет передан, будет использоваться файл из папки с проектом.
  #
  # Файл ищется по абсолютному пути или относительно папки, в которой находится конфиг.
  # В пути используется переменная, чтобы его можно было менять для разных команд.
  files:
    - ${COMPOSE_YML}

interaction:
  # Backend

  # Взаимодействие с проектом
  artisan:
    service: backend
    command: php artisan
    compose:
      method: exec
      run_options:
        - user www-data

  phpstan:
    service: backend
    command: vendor/bin/phpstan
    compose:
      method: exec
      run_options:
        - env PHP_MEMORY_LIMIT=2048M
        - user www-data

  pint:
    service: backend
    command: vendor/bin/pint
    compose:
      method: exec
      run_options:
        - user www-data

  captainhook:
    service: backend
    command: vendor/bin/captainhook
    compose:
      method: exec
      run_options:
        - user www-data

  # Запуск программ внутри контейнера
  composer:
    service: backend
    command: composer
    compose:
      run_options:
        - user www-data
        - env COMPOSER_HOME=/composer
        - volume composer-cache:/composer

  rr:
    service: backend
    command: rr
    compose:
      method: exec

  shell:
    service: backend
    command: sh
    compose:
      method: exec
      run_options:
        - user www-data
  root-shell:
    service: backend
    command: sh
    compose:
      method: exec
      run_options:
        - user root

  # Запуск программ без контейнера
  artisan-run:
    service: backend
    command: php artisan
    compose:
      run_options:
        - user www-data

  composer-8.1:
    command: docker run -it --rm -v ${PWD}:/app -v composer-cache:/composer -e COMPOSER_HOME=/composer ghcr.io/xwillq/dev-environment/php/8.1-rr:latest composer

  composer-7.4:
    command: docker run -it --rm -v ${PWD}:/app -v composer-cache:/composer -e COMPOSER_HOME=/composer ghcr.io/xwillq/dev-environment/php/7.4-nginx:latest composer


  # Базы данных
  psql:
    service: postgres
    command: psql
    compose:
      method: exec
    environment:
      PROJECT_DIR: ${DATABASES}
    subcommands:
      import:
        command: psql
        compose:
          run_options: [ "-T" ]
  pg_dump:
    service: postgres
    command: pg_dump
    compose:
      method: exec
    environment:
      PROJECT_DIR: ${DATABASES}

  mysql:
    service: mariadb
    command: mysql
    compose:
      method: exec
    environment:
      PROJECT_DIR: ${DATABASES}
    subcommands:
      import:
        command: mysql
        compose:
          run_options: [ "-T" ]
  mysqldump:
    service: mariadb
    command: mysqldump
    compose:
      method: exec
    environment:
      PROJECT_DIR: ${DATABASES}
  mariadb:
    service: mariadb
    command: mariadb
    compose:
      method: exec
    environment:
      PROJECT_DIR: ${DATABASES}
    subcommands:
      import:
        command: mariadb
        compose:
          run_options: [ "-T" ]

  redis-cli:
    service: redis
    command: redis-cli
    compose:
      method: exec
    environment:
      PROJECT_DIR: ${DATABASES}

  # Frontend
  npm:
    service: node
    command: npm
    environment:
      COMPOSE_YML: ${UTILS}/compose.yml
  
  yarn:
    service: node
    command: yarn
    environment:
      COMPOSE_YML: ${UTILS}/compose.yml
