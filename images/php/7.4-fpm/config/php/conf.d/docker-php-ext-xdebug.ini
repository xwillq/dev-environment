zend_extension=xdebug.so


; Try to connect to the host request came from, this should work when running in
; regular Docker
xdebug.discover_client_host = true
; Automatic host discovery doesn't work with Docker Desktop, since it uses a VM,
; however it automatically resolves `host.docker.internal` to host machine,
; so this option will make debugging work.
xdebug.client_host = host.docker.internal


; develop - add helper functions and improved errors
; coverage - enable code coverage
; debug - enable step debugging
; gcstats - enable garbage collection statistics
; profile - enable profiling
; trace - enable function tracing
xdebug.mode = develop,debug


; Start debugging, tracing, profiling and garbage collection stats on request or script execution.
; Only modes enabled in `xdebug.mode` are started.
; yes - start
; no - don't start
; trigger - require trigger (env variable, get or post variable or cookie) to start
xdebug.start_with_request = trigger
; Start debugging when Notice or Warning is emitted or Throwable is thrown
xdebug.start_upon_error = false


; Color var_dump in terminal
; 0 - don't color var_dump output
; 1 - color var_dump output when connected to tty
; 2 - always color var_dump output
xdebug.cli_color = 1


; Directory, where tracing, profiling, and garbage collection statistics will
; be written to
xdebug.output_dir = /app/xdebug
; Compress profiler and tracing ouput
; PHPStorm and KCacheGrind (Linux) can open compressed profiles, QCacheGrind (Windows, MacOS) cannot
xdebug.use_compression = false


; File name for profiles
xdebug.profiler_output_name = %t.%H%R.profile


; File name for traces
xdebug.trace_output_name = %t.%H%R.trace
; 0 - human readable
; 1 - machine readable (for using in programs)
; 2 - html
xdebug.trace_format = 0
; Collect variable assignments in traces
xdebug.collect_assignments = false
; Collect return values in traces
xdebug.collect_return = false
